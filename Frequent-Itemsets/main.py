import pandas as pdimport os,sysfrom IPython.display import displaydef dat_to_df(filename):  curr_file_dirr = os.path.dirname(__file__)  sys.path.append(curr_file_dirr)  print(curr_file_dirr)  doc = open(curr_file_dirr + '/data' + filename, 'r')  transactions = [i.strip('\n, ').split(' ') for i in doc] # Remove all new lines and split() splits a string into substrings whenever it finds a blank space.  return transactionsdef find_frequent_itemsets(data, s):    passdef generate_association_rules(data, s, c):    passdef main():    transactions = dat_to_df('/T10I4D100K.dat') # <-- this guy is huge    transactions = transactions[:20] # So we try with the first 20 transactions    print(transactions)main()# Support to see how frequent a set of items is in a dataset. E.g. How often does {2, 5} occur in  [[2,5,3],[1,2,3][2,5,8]]# Apriori algorithm was done for scalability# Task 1:# Support is the frequency (occurences) of the itemsets (A) or (A, B). Divide it by total num of items# Out of set of items (A-E) and set of transactions (T1 - T5) (containing subsets of set of items)# To find the support: # 1. Traverse the entire list of transactions# 2. Find if your subitemset (e.g. (milk, bread) which is a doubleton itemset) occurs more than s time where s is the threshold     # 2b. start with singletons (milk)    # 2c. then doubletons     # 2d up til the larges found basket (maybe we will find five baskets with e.g. 100 items, 99 of which are identical. if our threshold is 5, we will consider those itemsets as frequent itemsets     # Count the exact amount of occurences of those ITEMSETS that is greater than the threshold. This is the support. # For an itemset to be frequent, ALL its subsets must be frequent.         # Slide 17 important because apriori algorithm is based on this        # Task 2: # Generate association rules X - > Y Given a confidence